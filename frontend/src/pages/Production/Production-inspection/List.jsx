import React, { useEffect, useState } from 'react';
import { Link } from 'react-router-dom';
import Swal from 'sweetalert2';
import axios from 'axios';

const List = () => {
  const [inspections, setInspections] = useState([]);
  const [improvedData, setImprovedData] = useState([]); // เนเธเธดเนเธกเธชเธณเธซเธฃเธฑเธเธเนเธญเธกเธนเธฅเธเธฃเธฑเธเธเธฃเธธเธเนเธฅเนเธง
  const [activeTab, setActiveTab] = useState('all'); // 'all', 'improvement', 'improved'

  useEffect(() => {
    fetchInspections();
    fetchImprovedData(); // เนเธฃเธตเธขเธเธเนเธญเธกเธนเธฅเธเธฃเธฑเธเธเธฃเธธเธเนเธฅเนเธง
  }, []);

  const fetchInspections = async () => {
    try {
      const res = await axios.get('http://localhost:3000/api/list_inspection');
      setInspections(res.data);
    } catch (err) {
      console.error("Error loading inspections:", err);
    }
  };

  // เนเธเธดเนเธกเธเธฑเธเธเนเธเธฑเธเธเธถเธเธเนเธญเธกเธนเธฅเธเธฃเธฑเธเธเธฃเธธเธเนเธฅเนเธง
  const fetchImprovedData = async () => {
    try {
      const res = await axios.get('http://localhost:3000/api/improved_inspections');
      setImprovedData(res.data);
    } catch (err) {
      console.error("Error loading improved data:", err);
    }
  };

  const deleteInspection = async (id) => {
    const result = await Swal.fire({
      title: 'เบขเบทเบเบขเบฑเบเบเบฒเบเบฅเบปเบ',
      text: 'เบเปเบฒเบเปเบเปเปเบเบเปเปเบงเปเบฒเบเบฐเบฅเบปเบเบฅเบฒเบเบเบฒเบเบเบตเป?',
      icon: 'warning',
      showCancelButton: true,
      confirmButtonText: 'เบฅเบปเบ',
      cancelButtonText: 'เบเบปเบเปเบฅเบตเบ',
      reverseButtons: true,
    });

    if (result.isConfirmed) {
      try {
        await axios.delete(`http://localhost:3000/api/delete_inspection/${id}`);
        Swal.fire({
          icon: 'success',
          title: 'เบฅเบปเบเบชเบณเปเบฅเบฑเบ',
          timer: 2000,
          showConfirmButton: false,
          toast: true,
          position: 'top-end',
        });
        fetchInspections();
      } catch (error) {
        console.error("เบฅเบปเบเบเปเปเบชเบณเปเบฅเบฑเบ:", error);
        Swal.fire({
          icon: 'error',
          title: 'เบฅเบปเบเบเปเปเบชเบณเปเบฅเบฑเบ',
          text: 'เบเบฐเบฅเบธเบเบฒเบฅเบญเบเปเปเปเบเบฒเบเบซเบผเบฑเบ',
          timer: 3000,
          showConfirmButton: false,
          toast: true,
          position: 'top-end',
        });
      }
    }
  };

  // เธเธฃเธญเธเธเนเธญเธกเธนเธฅเธเธฒเธก tab เธเธตเนเนเธฅเธทเธญเธ
  const getFilteredInspections = () => {
    switch (activeTab) {
      case 'improvement':
        // เธเธฃเธญเธเธฃเธฒเธขเธเธฒเธฃเธเธตเนเธเนเธญเธเธเธฃเธฑเธเธเธฃเธธเธ (เธกเธตเธเธณเธเธงเธเนเธกเนเธเนเธฒเธ เนเธฅเธฐเธขเธฑเธเนเธกเนเนเธเนเธเธฃเธฑเธเธเธฃเธธเธ)
        return inspections.filter(item =>
          (item.amount_b || 0) > 0 &&
          item.status !== 'เบเบฑเบเบเบธเบเปเบฅเปเบง'
        );
      case 'improved':
        // เนเธเนเธเนเธญเธกเธนเธฅเธเธฒเธ improvement table
        return improvedData;
      case 'all':
      default:
        return inspections;
    }
  };

  const filteredInspections = getFilteredInspections();

  // เธเธฑเธเธเธณเธเธงเธเธชเธณเธซเธฃเธฑเธเนเธเนเธฅเธฐ tab
  const getTabCounts = () => {
    const improvement = inspections.filter(item =>
      (item.amount_b || 0) > 0 &&
      item.status !== 'เบเบฑเบเบเบธเบเปเบฅเปเบง'
    ).length;

    const improved = improvedData.length; // เนเธเนเธเนเธญเธกเธนเธฅเธเธฒเธ improvement table

    return {
      all: inspections.length,
      improvement,
      improved
    };
  };

  const tabCounts = getTabCounts();

  // เธเธฑเธเธเนเธเธฑเธเนเธชเธเธเธเนเธญเธกเธนเธฅเธเธฒเธกเนเธเนเธ
  const renderCardContent = (item) => {
    if (activeTab === 'improved') {
      // เนเธชเธเธเธเนเธญเธกเธนเธฅเธเธฒเธ improvement table
      return (
        <>
          <p><strong>๐ฆ เบเบฐเปเบเบ:</strong> {item.type_inspection}</p>
          <p><strong>๐ เบเบฐเปเบฒเบ:</strong> {item.size}</p>
          <p><strong>๐ เบเบณเบเบงเบเบเบงเบเบชเบญเบ:</strong> {item.amount_inspection}</p>
          <p className="text-green-600"><strong>โ เบเบณเบเบงเบเบเบฑเบเบเบธเบ:</strong> {item.amount_update}</p>
          <p className="text-red-500"><strong>โ เบเปเปเปเบเปเปเบเป:</strong> {item.amount_not_fix}</p>
          {item.amount_inspection > 0 && (
            <p className="text-blue-600">
              <strong>๐ เปเบเบตเปเบเบฑเบเบเบฑเบเบเบธเบ:</strong> {((item.amount_update / item.amount_inspection) * 100).toFixed(1)}%
            </p>
          )}
          <p><strong>๐ เปเบฒเบเปเบซเบ:</strong> {item.note || '-'}</p>
          <p><strong>๐ ID เบเบงเบเบชเบญเบ:</strong> {item.id_inspection}</p>
          <p><strong>๐ฅ เบเบฐเปเบเบเบญเบปเบเปเบซเปเบ:</strong> {item.type_drying || '-'}</p>
          <p><strong>๐ เบเบฐเปเบฒเบเบญเบปเบเปเบซเปเบ:</strong> {item.size_drying || '-'}</p>
          <p className="text-gray-700 font-medium text-base flex items-center space-x-2">
            <svg className="w-4 h-4 text-blue-500" fill="currentColor" viewBox="0 0 24 24">
              <path d="M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zM12 14c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z" />
            </svg>
            <span>{item.user}</span>
          </p>
        </>
      );
    } else if (activeTab === 'improvement') {
      // เนเธชเธเธเธเนเธญเธกเธนเธฅเธชเธณเธซเธฃเธฑเธเนเธเนเธเธเธฃเธฑเธเธเธฃเธธเธ
      return (
        <>
          <p><strong>๐ฆ เบเบฐเปเบเบเปเบกเป:</strong> {item.type_products}</p>
          <p><strong>๐ เบเบฐเปเบฒเบ:</strong> {item.size_products}</p>
          <p className="text-red-500 text-lg font-semibold">
            <strong>โ เบเบณเบเบงเบเบเปเปเบเปเบฒเบ:</strong> {item.amount_b}
          </p>
          <p className="text-orange-600">
            <strong>๐ เปเบเบตเปเบเบฑเบเบเปเปเบเปเบฒเบ:</strong> {item.amount > 0 ? ((item.amount_b / item.amount) * 100).toFixed(1) : 0}%
          </p>
          <p><strong>๐ เปเบฒเบเปเบซเบ:</strong> {item.note || '-'}</p>
          <p><strong>๐ฅ เบญเบปเบเปเบซเปเบ ID:</strong> {item.id_drying ?? '-'}</p>
        </>
      );
    } else {
      // เนเธชเธเธเธเนเธญเธกเธนเธฅเธเธเธเธดเธชเธณเธซเธฃเธฑเธเนเธเนเธเธเธฑเนเธเธซเธกเธ
      return (
        <>
          <p><strong>๐ฆ เบเบฐเปเบเบเปเบกเป:</strong> {item.type_products}</p>
          <p><strong>๐ เบเบฐเปเบฒเบ:</strong> {item.size_products}</p>
          <p><strong>๐ เบเบณเบเบงเบเบเบฑเบเปเบปเบ:</strong> {item.amount}</p>
          <p className="text-green-600"><strong>โ เบเปเบฒเบ:</strong> {item.amount_a}</p>
          <p className="text-red-500"><strong>โ เบเปเปเบเปเบฒเบ:</strong> {item.amount_b}</p>
          {item.amount > 0 && (
            <p className="text-orange-600">
              <strong>๐ เปเบเบตเปเบเบฑเบเบเปเปเบเปเบฒเบ:</strong> {((item.amount_b / item.amount) * 100).toFixed(1)}%
            </p>
          )}
          <p><strong>๐ เปเบฒเบเปเบซเบ:</strong> {item.note || '-'}</p>
          <p><strong>๐ฅ เบญเบปเบเปเบซเปเบ ID:</strong> {item.id_drying ?? '-'}</p>
          <p><strong>๐ เบชเบฐเบเบฒเบเบฐ:</strong>
            <span className={`ml-1 px-2 py-1 rounded text-xs ${item.status === 'เบเบฑเบเบเบธเบเปเบฅเปเบง'
              ? 'bg-green-100 text-green-600'
              : 'bg-blue-100 text-blue-600'
              }`}>
              {item.status}
            </span>
          </p>
          <p className="text-gray-700 font-medium text-base flex items-center space-x-2">
            <svg className="w-4 h-4 text-blue-500" fill="currentColor" viewBox="0 0 24 24">
              <path d="M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zM12 14c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z" />
            </svg>
            <span>{item.user}</span>
          </p>
        </>
      );
    }
  };

  // เธเธฑเธเธเนเธเธฑเธเนเธชเธเธเธเธธเนเธกเธเธฒเธกเนเธเนเธ
  const renderActionButtons = (item) => {
    if (activeTab === 'improvement') {
      return (
        <Link
          to={`/production-improvement_create?id=${item.id_inspection}`}
          className="bg-yellow-400 hover:bg-yellow-500 text-white px-3 py-2 rounded-lg text-sm w-full text-center transition-all"
        >
          ๐ง เบเบฑเบเบเบธเบ
        </Link>
      );
    } else if (activeTab === 'improved') {
      return (
        <div className="w-full text-center py-2 text-green-600 font-medium">
          โ เบเบณเปเบเบตเบเบเบฒเบเบเบฑเบเบเบธเบเปเบฅเปเบง
        </div>
      );
    }
    // เธชเธณเธซเธฃเธฑเธเนเธเนเธ all เนเธกเนเนเธชเธเธเธเธธเนเธกเธญเธฐเนเธฃ
    return null;
  };

  return (
    <div className="max-w-7xl mx-auto px-4 py-10">
      <div className="flex justify-between items-center mb-8">
        <h1 className="text-3xl font-extrabold text-gray-900 flex items-center space-x-2">
          <span>๐</span>
          <span>เบฅเบฒเบเบเบฒเบเบเบงเบเบชเบญเบเบชเบดเบเบเปเบฒ</span>
        </h1>
        <Link
          to={`/production-inspection_create`}
          className="inline-block bg-green-600 hover:bg-green-700 focus:ring-4 focus:ring-green-400 text-white px-6 py-3 rounded-lg shadow-lg transition duration-300 font-semibold select-none"
        >
          โ เปเบเบตเปเบกเบเบฒเบเบเบงเบเบชเบญเบ
        </Link>
      </div>

      {/* Toggle Tabs */}
      <div className="mb-8">
        <div className="flex space-x-2 bg-gray-100 p-1 rounded-xl shadow-inner">
          {[
            { key: 'all', label: '๐ เบเบฑเบเปเบปเบ', count: tabCounts.all, color: 'blue' },
            { key: 'improvement', label: '๐ง เบเปเบญเบเบเบฑเบเบเบธเบ', count: tabCounts.improvement, color: 'orange' },
            { key: 'improved', label: 'โ เบเบฑเบเบเบธเบเปเบฅเปเบง', count: tabCounts.improved, color: 'green' },
          ].map(({ key, label, count, color }) => (
            <button
              key={key}
              onClick={() => setActiveTab(key)}
              className={`flex-1 py-3 rounded-lg text-sm font-semibold transition-colors duration-300
            ${activeTab === key
                  ? `bg-white text-${color}-600 shadow-lg`
                  : `text-gray-600 hover:text-gray-900 hover:bg-gray-200`}
          `}
              aria-pressed={activeTab === key}
              role="tab"
              aria-selected={activeTab === key}
            >
              {label} <span className="font-mono text-xs bg-gray-200 rounded-full px-2 py-0.5 ml-1">{count}</span>
            </button>
          ))}
        </div>
      </div>

      {filteredInspections.length === 0 ? (
        <div className="bg-white text-center text-gray-500 py-20 rounded-lg shadow-md select-none">
          {activeTab === 'all' && 'เบเปเปเบกเบตเบเปเปเบกเบนเบเบเบงเบเบชเบญเบ'}
          {activeTab === 'improvement' && 'เบเปเปเบกเบตเบเปเปเบกเบนเบเบเบตเปเบเปเบญเบเบเบฑเบเบเบธเบ'}
          {activeTab === 'improved' && 'เบเปเปเบกเบตเบเปเปเบกเบนเบเบเบตเปเบเบฑเบเบเบธเบเปเบฅเปเบง'}
        </div>
      ) : (
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-8">
          {filteredInspections.map((item, index) => (
            <div
              key={activeTab === 'improved' ? item.id_improvement : item.id_inspection}
              className="bg-white rounded-2xl shadow-lg hover:shadow-2xl transition-shadow duration-300 p-6 border border-gray-200 flex flex-col justify-between"
              role="article"
              tabIndex={0}
            >
              <header className="flex justify-between items-start mb-4">
                <h2 className="text-lg font-bold text-gray-800">#{index + 1}</h2>
                <div className="flex items-center space-x-3">
                  <span className="text-xs text-gray-400 select-text">
                    ID: {activeTab === 'improved' ? item.id_improvement : item.id_inspection}
                  </span>

                  {(item.status === 'เบเบฑเบเบเบธเบเปเบฅเปเบง' || activeTab === 'improved') && (
                    <span className="inline-flex items-center bg-green-100 text-green-700 text-xs font-semibold px-3 py-1 rounded-full select-none shadow-sm">
                      โ เบเบฑเบเบเบธเบเปเบฅเปเบง
                    </span>
                  )}

                  {activeTab === 'improvement' && (
                    <span className="inline-flex items-center bg-orange-100 text-orange-700 text-xs font-semibold px-3 py-1 rounded-full select-none shadow-sm">
                      ๐ง เบเปเบญเบเบเบฑเบเบเบธเบ
                    </span>
                  )}

                  {/* เธเธธเนเธกเธฅเธเนเธเธเธฒเธฐเนเธเนเธ all เนเธฅเธฐ improvement */}
                  {/* {activeTab !== 'improved' && (
                    <button
                      onClick={() => deleteInspection(item.id_inspection)}
                      title="เบฅเบปเบเบฅเบฒเบเบเบฒเบ"
                      className="text-red-600 hover:text-red-800 hover:bg-red-100 rounded-full p-1 transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-red-400"
                      aria-label={`เธฅเธเธฃเธฒเธขเธเธฒเธฃ ID ${item.id_inspection}`}
                    >
                      โ
                    </button>
                  )} */}
                </div>
              </header>

              <div className="text-gray-600 text-sm space-y-2 mb-6">
                {renderCardContent(item)}
              </div>

              <footer className="flex justify-end space-x-3">
                {renderActionButtons(item)}
              </footer>
            </div>
          ))}
        </div>
      )}
    </div>

  );
};

export default List;