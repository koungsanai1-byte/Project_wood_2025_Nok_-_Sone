// List.js
import React, { useEffect, useState } from 'react';
import { useNavigate, Link } from 'react-router-dom';
import { Loader2, CheckCircle2, Package, Trash2 } from "lucide-react";
import Swal from 'sweetalert2';
import axios from 'axios';

const List = () => {
  const [processes, setProcesses] = useState([]);
  const [activeTab, setActiveTab] = useState('all'); // 'all', 'producing', 'ready', 'completed'
  const navigate = useNavigate();

  useEffect(() => {
    fetch();
  }, []);

  const fetch = () => {
    axios.get('http://localhost:3000/api/list_process_x')
      .then(res => {
        if (Array.isArray(res.data)) setProcesses(res.data);
        else if (res.data) setProcesses([res.data]);
        else setProcesses([]);
      })
      .catch(err => console.error('Error loading process:', err));
  };

  const handleStatusClick = (item) => {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö status ‡πÅ‡∏•‡∏∞‡∏ô‡∏≥‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
    if (item.status === "‡∫û‡ªâ‡∫≠‡∫°‡∫≠‡∫ª‡∫ö") {
      // ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ create drying ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• process
      navigate('/production-drying_create', { state: { processData: item } });
    } else {
      // ‡πÅ‡∏ö‡∏ö‡πÄ‡∏Å‡πà‡∏≤: ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• process
      navigate('/amount', { state: { processData: item } });
    }
  };

  const handleDelete = (id) => {
    Swal.fire({
      title: '‡∫¢‡∫∑‡∫ô‡∫¢‡∫±‡∫ô‡∫Å‡∫≤‡∫ô‡∫•‡∫ª‡∫ö',
      text: "‡∫ó‡ªà‡∫≤‡∫ô‡ªÅ‡∫ô‡ªà‡ªÉ‡∫à‡∫ö‡ªç‡ªà‡∫ß‡ªà‡∫≤‡∫à‡∫∞‡∫•‡∫ª‡∫ö‡∫•‡∫≤‡∫ç‡∫Å‡∫≤‡∫ô‡∫ô‡∫µ‡ªâ?",
      icon: 'warning',
      showCancelButton: true,
      confirmButtonText: '‡∫¢‡∫∑‡∫ô‡∫¢‡∫±‡∫ô',
      cancelButtonText: '‡∫ç‡∫ª‡∫Å‡ªÄ‡∫•‡∫µ‡∫Å',
    }).then((result) => {
      if (result.isConfirmed) {
        axios.delete(`http://localhost:3000/api/delete_process/${id}`)
          .then(() => {
            Swal.fire({
              icon: 'success',
              title: '‡∫•‡∫ª‡∫ö‡∫™‡∫≥‡ªÄ‡∫•‡∫±‡∫î',
              toast: true,
              position: 'top-end',
              timer: 2000,
              showConfirmButton: false,
            });
            fetch();
          })
          .catch(err => {
            console.error('Error deleting:', err);
            Swal.fire({
              icon: 'error',
              title: '‡∫•‡∫ª‡∫ö‡∫•‡∫ª‡ªâ‡∫°‡ªÄ‡∫´‡∫º‡∫ß',
              text: err.message || '',
              toast: true,
              position: 'top-end',
              timer: 3000,
              showConfirmButton: false,
            });
          });
      }
    });
  };

  // ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏° tab ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
  const getFilteredProcesses = () => {
    switch (activeTab) {
      case 'producing':
        return processes.filter(item => item.status === '‡∫Å‡∫≥‡∫•‡∫±‡∫á‡∫ú‡∫∞‡∫•‡∫¥‡∫î');
      case 'ready':
        return processes.filter(item => item.status === '‡∫û‡ªâ‡∫≠‡∫°‡∫≠‡∫ª‡∫ö');
      case 'completed':
        return processes.filter(item =>
          item.status === '‡∫ú‡∫∞‡∫•‡∫¥‡∫î‡∫™‡∫≥‡ªÄ‡∫•‡∫±‡∫î' ||
          item.status === '‡∫™‡∫≥‡ªÄ‡∫•‡∫±‡∫î' ||
          item.status === '‡∫™‡∫ª‡ªà‡∫á‡∫≠‡∫ª‡∫ö‡ªÅ‡∫•‡ªâ‡∫ß'
        );
      case 'all':
      default:
        return processes;
    }
  };

  const filteredProcesses = getFilteredProcesses();

  // ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞ tab
  const getTabCounts = () => {
    const producing = processes.filter(item => item.status === '‡∫Å‡∫≥‡∫•‡∫±‡∫á‡∫ú‡∫∞‡∫•‡∫¥‡∫î').length;
    const ready = processes.filter(item => item.status === '‡∫û‡ªâ‡∫≠‡∫°‡∫≠‡∫ª‡∫ö').length;
    const completed = processes.filter(item =>
      item.status === '‡∫ú‡∫∞‡∫•‡∫¥‡∫î‡∫™‡∫≥‡ªÄ‡∫•‡∫±‡∫î' ||
      item.status === '‡∫™‡∫≥‡ªÄ‡∫•‡∫±‡∫î' ||
      item.status === '‡∫™‡∫ª‡ªà‡∫á‡∫≠‡∫ª‡∫ö‡ªÅ‡∫•‡ªâ‡∫ß'
    ).length;

    return {
      all: processes.length,
      producing,
      ready,
      completed
    };
  };

  const tabCounts = getTabCounts();

  return (
    <div className="max-w-7xl mx-auto mt-10 p-6 bg-white rounded-2xl shadow-xl border border-gray-200">
      <div className="flex justify-between items-center mb-6">
        <h2 className="text-3xl font-bold text-blue-700">üì¶ ‡∫•‡∫≤‡∫ç‡∫Å‡∫≤‡∫ô ‡∫ú‡∫∞‡∫•‡∫¥‡∫î</h2>
        <Link
          to="/production-process_create"
          className="bg-green-600 hover:bg-green-700 text-white font-semibold py-2 px-4 rounded-lg shadow"
        >
          ‚ûï ‡∫™‡∫±‡ªà‡∫á‡∫ú‡∫∞‡∫•‡∫¥‡∫î
        </Link>
      </div>

      {/* Toggle Tabs */}
      <div className="mb-6">
        <div className="flex space-x-1 bg-gray-100 p-1 rounded-lg">
          <button
            onClick={() => setActiveTab('all')}
            className={`flex-1 py-2 px-4 rounded-md text-sm font-medium transition-all ${activeTab === 'all'
              ? 'bg-white text-blue-600 shadow-md'
              : 'text-gray-600 hover:text-gray-800'
              }`}
          >
            üìä ‡∫ó‡∫±‡∫á‡ªù‡∫ª‡∫î ({tabCounts.all})
          </button>
          <button
            onClick={() => setActiveTab('producing')}
            className={`flex-1 py-2 px-4 rounded-md text-sm font-medium transition-all ${activeTab === 'producing'
              ? 'bg-white text-blue-600 shadow-md'
              : 'text-gray-600 hover:text-gray-800'
              }`}
          >
            üîÑ ‡∫Å‡∫≥‡∫•‡∫±‡∫á‡∫ú‡∫∞‡∫•‡∫¥‡∫î ({tabCounts.producing})
          </button>
          <button
            onClick={() => setActiveTab('ready')}
            className={`flex-1 py-2 px-4 rounded-md text-sm font-medium transition-all ${activeTab === 'ready'
              ? 'bg-white text-purple-600 shadow-md'
              : 'text-gray-600 hover:text-gray-800'
              }`}
          >
            üî• ‡∫û‡ªâ‡∫≠‡∫°‡∫≠‡∫ª‡∫ö ({tabCounts.ready})
          </button>
          <button
            onClick={() => setActiveTab('completed')}
            className={`flex-1 py-2 px-4 rounded-md text-sm font-medium transition-all ${activeTab === 'completed'
              ? 'bg-white text-green-600 shadow-md'
              : 'text-gray-600 hover:text-gray-800'
              }`}
          >
            ‚úÖ ‡∫™‡∫≥‡ªÄ‡∫•‡∫±‡∫î ({tabCounts.completed})
          </button>
        </div>
      </div>

      <div className="overflow-x-auto">
        <table className="min-w-full border border-gray-300 text-sm text-center">
          <thead className="bg-blue-100 text-gray-700 font-semibold">
            <tr>
              <th className="py-2 px-3 border">‡ªÄ‡∫•‡∫Å‡ªÑ‡∫°‡ªâ‡∫ó‡∫µ‡ªà‡ªÄ‡∫ö‡∫µ‡∫Å</th>
              <th className="py-2 px-3 border">‡∫ä‡∫∑‡ªà‡ªÑ‡∫°‡ªâ</th>
              <th className="py-2 px-3 border">‡∫õ‡∫∞‡ªÄ‡∫û‡∫î</th>
              <th className="py-2 px-3 border">‡∫Ç‡∫∞‡ªú‡∫≤‡∫î</th>
              <th className="py-2 px-3 border">‡ªú‡ªà‡∫ß‡∫ç‡∫ß‡∫±‡∫î</th>
              <th className="py-2 px-3 border">‡∫à‡∫≥‡∫ô‡∫ß‡∫ô‡ªÄ‡∫ö‡∫µ‡∫Å</th>
              <th className="py-2 px-3 border">‡ªÄ‡∫•‡∫Å‡ªÑ‡∫°‡ªâ‡∫ó‡∫µ‡∫ú‡∫∞‡∫•‡∫¥‡∫î</th>
              <th className="py-2 px-3 border">‡∫õ‡∫∞‡ªÄ‡∫û‡∫î‡∫ú‡∫∞‡∫•‡∫¥‡∫î</th>
              <th className="py-2 px-3 border">‡∫Ç‡∫∞‡ªú‡∫≤‡∫î‡∫ú‡∫∞‡∫•‡∫¥‡∫î</th>
              <th className="py-2 px-3 border">‡∫à‡∫≥‡∫ô‡∫ß‡∫ô‡∫ú‡∫∞‡∫•‡∫¥‡∫î</th>
              <th className="py-2 px-3 border">‡ªù‡∫≤‡∫ç‡ªÄ‡∫´‡∫î</th>
              <th className="py-2 px-3 border">‡∫ú‡∫π‡ªâ‡∫Æ‡∫±‡∫ö‡∫ú‡∫¥‡∫î‡∫ä‡∫≠‡∫ö</th>
              <th className="py-2 px-3 border">‡∫™‡∫∞‡∫ñ‡∫≤‡∫ô‡∫∞</th>
              {/* <th className="py-2 px-3 border">‡∫à‡∫±‡∫î‡∫Å‡∫≤‡∫ô</th> */}
            </tr>
          </thead>
          <tbody>
            {filteredProcesses.length === 0 ? (
              <tr>
                <td colSpan="13" className="py-6 text-gray-500 italic">
                  {activeTab === 'all' && '‡∫ö‡ªç‡ªà‡∫°‡∫µ‡∫Ç‡ªç‡ªâ‡∫°‡∫π‡∫ô‡∫Å‡∫≤‡∫ô‡∫ú‡∫∞‡∫•‡∫¥‡∫î'}
                  {activeTab === 'producing' && '‡∫ö‡ªç‡ªà‡∫°‡∫µ‡∫Ç‡ªç‡ªâ‡∫°‡∫π‡∫ô‡∫Å‡∫≤‡∫ô‡∫ú‡∫∞‡∫•‡∫¥‡∫î‡∫ó‡∫µ‡ªà‡∫Å‡∫≥‡∫•‡∫±‡∫á‡∫î‡∫≥‡ªÄ‡∫ô‡∫µ‡∫ô'}
                  {activeTab === 'ready' && '‡∫ö‡ªç‡ªà‡∫°‡∫µ‡∫Ç‡ªç‡ªâ‡∫°‡∫π‡∫ô‡∫Å‡∫≤‡∫ô‡∫ú‡∫∞‡∫•‡∫¥‡∫î‡∫ó‡∫µ‡ªà‡∫û‡ªâ‡∫≠‡∫°‡∫≠‡∫ª‡∫ö'}
                  {activeTab === 'completed' && '‡∫ö‡ªç‡ªà‡∫°‡∫µ‡∫Ç‡ªç‡ªâ‡∫°‡∫π‡∫ô‡∫Å‡∫≤‡∫ô‡∫ú‡∫∞‡∫•‡∫¥‡∫î‡∫ó‡∫µ‡ªà‡∫™‡∫≥‡ªÄ‡∫•‡∫±‡∫î‡ªÅ‡∫•‡ªâ‡∫ß'}
                </td>
              </tr>
            ) : (
              filteredProcesses.map(item => (
                <tr key={item.id_process} className="hover:bg-gray-50 transition">
                  <td className="py-2 px-3 border">{item.id_requisition}</td>
                  <td className="py-2 px-3 border">{item.name}</td>
                  <td className="py-2 px-3 border">{item.type}</td>
                  <td className="py-2 px-3 border">{item.size}</td>
                  <td className="py-2 px-3 border">{item.volume}</td>
                  <td className="py-2 px-3 border">{item.amount}</td>
                  <td className="py-2 px-3 border">{item.id_process}</td>
                  <td className="py-2 px-3 border">{item.type_products}</td>
                  <td className="py-2 px-3 border">{item.size_products}</td>
                  <td className="py-2 px-3 border">{item.amount_products}</td>
                  <td className="py-2 px-3 border">{item.note || '-'}</td>
                  <td className="py-2 px-3 border">{item.user || '-'}</td>

                  <td className="py-2 px-3 border text-center">
                    <button
                      onClick={() => handleStatusClick(item)}
                      disabled={
                        !item.status ||
                        (item.status !== "‡∫Å‡∫≥‡∫•‡∫±‡∫á‡∫ú‡∫∞‡∫•‡∫¥‡∫î" && item.status !== "‡∫û‡ªâ‡∫≠‡∫°‡∫≠‡∫ª‡∫ö")
                      }
                      className={`flex items-center justify-center gap-1 rounded-md font-medium text-sm px-3 py-1 transition-colors
                       ${item.status === "‡∫Å‡∫≥‡∫•‡∫±‡∫á‡∫ú‡∫∞‡∫•‡∫¥‡∫î"
                          ? "bg-blue-500 text-white hover:bg-blue-700 cursor-pointer"
                          : item.status === "‡∫û‡ªâ‡∫≠‡∫°‡∫≠‡∫ª‡∫ö"
                            ? "bg-purple-500 text-white hover:bg-purple-700 cursor-pointer"
                            : ["‡∫ú‡∫∞‡∫•‡∫¥‡∫î‡∫™‡∫≥‡ªÄ‡∫•‡∫±‡∫î", "‡∫™‡∫≥‡ªÄ‡∫•‡∫±‡∫î", "‡∫™‡∫ª‡ªà‡∫á‡∫≠‡∫ª‡∫ö‡ªÅ‡∫•‡ªâ‡∫ß"].includes(item.status)
                              ? "italic text-gray-600 cursor-default bg-gray-100"
                              : "text-gray-600 cursor-default bg-transparent"
                        }
                          `}
                      title={
                        item.status === "‡∫Å‡∫≥‡∫•‡∫±‡∫á‡∫ú‡∫∞‡∫•‡∫¥‡∫î"
                          ? "‡∫Å‡∫≥‡∫•‡∫±‡∫á‡∫ú‡∫∞‡∫•‡∫¥‡∫î - ‡∫Å‡∫ª‡∫î‡ªÄ‡∫û‡∫∑‡ªà‡∫≠‡ªÅ‡∫Å‡ªâ‡ªÑ‡∫Ç"
                          : item.status === "‡∫û‡ªâ‡∫≠‡∫°‡∫≠‡∫ª‡∫ö"
                            ? "‡∫û‡ªâ‡∫≠‡∫°‡∫≠‡∫ª‡∫ö - ‡∫Å‡∫ª‡∫î‡ªÄ‡∫û‡∫∑‡ªà‡∫≠‡ªÅ‡∫Å‡ªâ‡ªÑ‡∫Ç"
                            : "‡∫™‡∫∞‡∫ñ‡∫≤‡∫ô‡∫∞‡∫™‡∫¥‡∫ô‡∫Ñ‡ªâ‡∫≤"
                      }
                    >
                      {item.status === "‡∫Å‡∫≥‡∫•‡∫±‡∫á‡∫ú‡∫∞‡∫•‡∫¥‡∫î" && <Loader2 size={16} className="animate-spin" />}
                      {item.status === "‡∫û‡ªâ‡∫≠‡∫°‡∫≠‡∫ª‡∫ö" && <Package size={16} />}
                      {["‡∫ú‡∫∞‡∫•‡∫¥‡∫î‡∫™‡∫≥‡ªÄ‡∫•‡∫±‡∫î", "‡∫™‡∫≥‡ªÄ‡∫•‡∫±‡∫î", "‡∫™‡∫ª‡ªà‡∫á‡∫≠‡∫ª‡∫ö‡ªÅ‡∫•‡ªâ‡∫ß"].includes(item.status) && (
                        <CheckCircle2 size={16} />
                      )}
                      <span className="whitespace-nowrap">{item.status || "-"}</span>
                    </button>
                  </td>

                  {/* <td className="py-2 px-3 border">
                    <button
                      onClick={() => handleDelete(item.id_process)}
                      className="inline-flex items-center justify-center bg-red-500 hover:bg-red-600 text-white py-1 px-3 rounded"
                      title="‡∫•‡∫ª‡∫ö"
                    >
                      <Trash2 size={18} />
                    </button>
                  </td> */}
                </tr>
              ))
            )}
          </tbody>
        </table>
      </div>
    </div>
  );
};

export default List;