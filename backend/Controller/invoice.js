const db = require('../Config/db'); // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô path ‡∏ï‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏à‡∏£‡∏¥‡∏á

// üîπ GET: ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î

exports.getAllShops = async (req, res) => {
  const sql = "SELECT * FROM invoice WHERE payment != '‡∫ï‡∫¥‡∫î‡ªú‡∫µ‡ªâ' ORDER BY id_invoices DESC "
  db.query(sql, (err, result) => {
    if(err) return res.json(err);
    return res.json(result);
  });
};



// ‡πÉ‡∏ô shopController.js
exports.getTodaySalesTotal = (req, res) => {
  const sql = `
    SELECT SUM(total) AS total_sales_today
    FROM invoice
    WHERE DATE(created_at) = CURDATE() AND statuss = '‡∫Ç‡∫≤‡∫ç‡ªÅ‡∫•‡ªâ‡∫ß';
  `;
  db.query(sql, (err, result) => {
    if (err) return res.status(500).json(err);
    return res.json(result[0]); // { total_sales_today: 123456.789 }
  });
};


exports.getById = async (req, res) => {
  const { id } = req.params;
  try {
    const rows = await db.query('SELECT * FROM invoice WHERE id_invoices = ?', [id]);
    if (rows.length === 0) {
      return res.status(404).json({ error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•' });
    }
    res.json(rows[0]);
  } catch (err) {
    console.error('Error fetching delivery:', err);
    res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î' });
  }
};



// üîπ POST: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢
exports.createShop = async (req, res) => {
  console.log(req.body);

  const {
    id_products,
    type_products,
    size_products,
    price,
    amount,
    total,
    user_buy,
    contect,
    provinces,
    districts,
    villages,
    vall,
    payment,
    payments,
    note,
  } = req.body;

  try {
    // ‡πÄ‡∏£‡∏¥‡πà‡∏° transaction
    await db.beginTransaction();

    // 1) Insert into shop
    const result = await db.query(
      `INSERT INTO invoice (type_products, size_products, price, amount, total, user_buy, note, id_products ,contect, provinces, districts, villages, vall, payment,payments, statuss)
       VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, '‡∫¢‡∫∑‡∫ô‡∫¢‡∫±‡∫ô')`,
      [type_products, size_products, price, amount, total, user_buy, note, id_products, contect, provinces, districts, villages, vall ,payment, payments]
    );

    // 2) Update products stock
    await db.query(
      `UPDATE products
         SET amount_products = amount_products - ?
       WHERE id_products = ?`,
      [amount, id_products]
    );

    // 3) Delete product if out of stock
    await db.query(
      `DELETE FROM products WHERE id_products = ? AND amount_products <= 0`,
      [id_products]
    );

    // commit transaction
    await db.commit();
    res.status(201).json({ message: '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', id: result.insertId });
  } catch (err) {
    // rollback on error
    await db.rollback();
    console.error('Error creating invoices:', err);
    res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡∏•‡∏±‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤' });
  }
};

// üîπ DELETE: ‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∑‡∏ô stock
exports.deleteShop = async (req, res) => {
  const { id } = req.params;
  console.log('üîÅ START delete id:', id);

  try {
    await db.beginTransaction();
    console.log('‚úÖ BEGIN TRANSACTION');

    // ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ destructuring
    const shopRows = await db.query(
      'SELECT id_products, amount FROM invoice WHERE id_invoices = ?',
      [id]
    );
    console.log('üîç Shop rows:', shopRows);

    if (!shopRows || shopRows.length === 0) {
      await db.rollback();
      return res.status(404).json({ error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢' });
    }

    const { id_products, amount } = shopRows[0];
    console.log('üü° Product ID:', id_products, 'Amount to return:', amount);

    // ‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏≤‡∏Å shop
    await db.query('DELETE FROM invoice WHERE id_invoices = ?', [id]);
    console.log('üóëÔ∏è Deleted from shop');

    // ‡∏Ñ‡∏∑‡∏ô stock ‡πÉ‡∏´‡πâ products
    const updateResult = await db.query(
      'UPDATE products SET amount_products = amount_products + ? WHERE id_products = ?',
      [amount, id_products]
    );
    console.log('‚úÖ Updated product stock:', updateResult);

    if (updateResult.affectedRows === 0) {
      console.log('‚ö†Ô∏è Product not found, but continuing...');
      // ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á rollback
    }

    await db.commit();
    console.log('‚úÖ COMMIT SUCCESS');
    res.json({ message: '‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∑‡∏ô stock ‡πÅ‡∏•‡πâ‡∏ß' });

  } catch (err) {
    await db.rollback();
    console.error('‚ùå ERROR:', err);
    res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏∑‡∏ô stock' });
  }
};




// üîπ PATCH: ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢
exports.confirmSaleStatus = async (req, res) => {
  const { id } = req.params;

  try {
    const result = await db.query(
      `UPDATE invoice SET statuss = '‡∫Ç‡∫≤‡∫ç‡ªÅ‡∫•‡ªâ‡∫ß' WHERE id_invoices = ?`,
      [id]
    );

    if (result.affectedRows === 0) {
      return res.status(404).json({ error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï' });
    }

    res.json({ message: '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô ‡∫Ç‡∫≤‡∫ç‡ªÅ‡∫•‡ªâ‡∫ß ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' });
  } catch (err) {
    console.error('Error updating status:', err);
    res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞' });
  }
}

