const db = require('../Config/db');

exports.createInspection = async (req, res) => {
    console.log(req.body)
    const {
        type_products,
        size_products,
        amount,
        amount_a,
        amount_b,
        note,
        id_drying,
        id_improvement,
        data_source,
         user
    } = req.body;

    try {
        await db.beginTransaction();

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ï‡∏≤‡∏° data_source
        if (data_source === 'drying' && id_drying) {
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö drying ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
            const dryingExists = await db.query('SELECT * FROM drying WHERE id_drying = ?', [id_drying]);
            if (dryingExists.length === 0) {
                await db.rollback();
                return res.status(400).json({ error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏≠‡∏ö‡πÅ‡∏´‡πâ‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å' });
            }

            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ drying
            if (dryingExists[0].status === '‡∫Å‡∫ß‡∫î‡∫™‡∫≠‡∫ö‡ªÅ‡∫•‡ªâ‡∫ß') {
                await db.rollback();
                return res.status(400).json({ error: '‡∏•‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ã‡πâ‡∏≥‡πÑ‡∏î‡πâ' });
            }
        } else if (data_source === 'improvement' && id_improvement) {
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö improvement ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
            const improvementExists = await db.query('SELECT * FROM improvement WHERE id_imporvement = ?', [id_improvement]);
            if (improvementExists.length === 0) {
                await db.rollback();
                return res.status(400).json({ error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å' });
            }
        }

        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å inspection
        const sqlInsert = `
            INSERT INTO inspection (
                type_products, 
                size_products, 
                amount, 
                amount_a, 
                amount_b, 
                note, 
                status, 
                id_drying, 
                id_improvement, 
                data_source,
                user
            )
            VALUES (?, ?, ?, ?, ?, ?, '‡∫Å‡∫ß‡∫î‡∫™‡∫≠‡∫ö‡ªÅ‡∫•‡ªâ‡∫ß', ?, ?, ?, ?)
        `;

        const result = await db.query(sqlInsert, [
            type_products,
            size_products,
            amount,
            amount_a,
            amount_b,
            note,
            id_drying || null,
            id_improvement || null,
            data_source || 'drying',
             user
        ]);

        console.log('‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å inspection ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ID:', result.insertId);

        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        if (data_source === 'drying' && id_drying) {
            await db.query('UPDATE drying SET status = "‡∫Å‡∫ß‡∫î‡∫™‡∫≠‡∫ö‡ªÅ‡∫•‡ªâ‡∫ß" WHERE id_drying = ?', [id_drying]);
            console.log('‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ drying ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
        } else if (data_source === 'improvement' && id_improvement) {
            await db.query('UPDATE improvement SET status = "‡∫ô‡∫≥‡ªÑ‡∫õ‡∫Å‡∫ß‡∫î‡∫™‡∫≠‡∫ö‡ªÅ‡∫•‡ªâ‡∫ß" WHERE id_imporvement = ?', [id_improvement]);
            console.log('‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ improvement ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
        }

        // üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ products ‡∏ó‡∏µ‡πà‡∏°‡∏µ type ‡πÅ‡∏•‡∏∞ size ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö inspection
        const findProductSql = `
            SELECT p.* 
            FROM products p
            LEFT JOIN type_products t ON p.id_type_products = t.id_type_products
            LEFT JOIN size_products s ON p.id_size_products = s.id_size_products
            WHERE t.type_products = ? AND s.size_products = ?
        `;

        const matchingProducts = await db.query(findProductSql, [type_products, size_products]);

        if (matchingProducts.length > 0) {
            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏ó‡∏∏‡∏Å products ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô
            for (const product of matchingProducts) {
                const newAmount = (product.amount_products || 0) + (amount_a || 0);

                await db.query(
                    'UPDATE products SET amount_products = ? WHERE id_products = ?',
                    [newAmount, product.id_products]
                );

                console.log(`‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï product ID ${product.id_products}: ${product.amount_products} + ${amount_a} = ${newAmount}`);
            }

            console.log(`üì¶ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï ${matchingProducts.length} products ‡∏ó‡∏µ‡πà‡∏°‡∏µ type: ${type_products}, size: ${size_products}`);
        } else {
            console.log(`‚ÑπÔ∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö products ‡∏ó‡∏µ‡πà‡∏°‡∏µ type: ${type_products}, size: ${size_products}`);
        }

        await db.commit();

        res.status(201).json({
            success: true,
            message: '‡∫ö‡∫±‡∫ô‡∫ó‡∫∂‡∫Å‡∫™‡∫≥‡ªÄ‡∫•‡∫±‡∫î',
            inspection_id: result.insertId,
            data_source: data_source,
            drying_status_updated: data_source === 'drying' ? true : false,
            improvement_status_updated: data_source === 'improvement' ? true : false,
            products_updated: matchingProducts.length,
            products_updated_details: matchingProducts.map(p => ({
                product_id: p.id_products,
                old_amount: p.amount_products,
                added_amount: amount_a,
                new_amount: (p.amount_products || 0) + (amount_a || 0)
            }))
        });

    } catch (err) {
        await db.rollback();
        console.error("‚ùå CREATE INSPECTION ERROR:", err);
        res.status(500).json({
            error: '‡ªÄ‡∫Å‡∫µ‡∫î‡∫Ç‡ªç‡ªâ‡∫ú‡∫¥‡∫î‡∫û‡∫≤‡∫î‡ªÉ‡∫ô‡∫Å‡∫≤‡∫ô‡∫™‡ªâ‡∫≤‡∫á',
            details: err.message
        });
    }
};

// GET: Drying ‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
exports.getDryingReadyForInspection = async (req, res) => {
    try {
        const sql = `
            SELECT id_drying, type_drying, size_drying, amount_drying, time_start, time_end
            FROM drying 
            WHERE status = '‡∫Å‡∫ß‡∫î‡∫™‡∫≠‡∫ö'
            ORDER BY id_drying DESC
        `;
        const results = await db.query(sql);
        res.json(results);
    } catch (err) {
        console.error("‚ùå Get drying for inspection error:", err);
        res.status(500).json({ error: "‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" });
    }
};

// GET: All Inspections (Updated to include data source info)
exports.getAllInspections = async (req, res) => {
    try {
        const results = await db.query(`
            SELECT 
                i.*, 
                d.type_drying, 
                d.size_drying,
                imp.type_inspection,
                imp.size as improvement_size
            FROM inspection i
            LEFT JOIN drying d ON i.id_drying = d.id_drying
            LEFT JOIN improvement imp ON i.id_improvement = imp.id_imporvement
            ORDER BY i.id_inspection DESC
        `);
        res.json(results);
    } catch (err) {
        console.error("‚ùå Get all inspections error:", err);
        res.status(500).json({ error: '‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' });
    }
};

// GET: Inspection by ID (Updated to include data source info)
exports.getInspectionById = async (req, res) => {
    const { id } = req.params;
    try {
        const results = await db.query(`
            SELECT 
                i.*, 
                d.type_drying, 
                d.size_drying, 
                d.amount_drying,
                imp.type_inspection,
                imp.size as improvement_size,
                imp.amount_update
            FROM inspection i
            LEFT JOIN drying d ON i.id_drying = d.id_drying
            LEFT JOIN improvement imp ON i.id_improvement = imp.id_imporvement
            WHERE i.id_inspection = ?
        `, [id]);

        if (results.length === 0) {
            return res.status(404).json({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö' });
        }
        res.json(results[0]);
    } catch (err) {
        console.error("‚ùå Get inspection by ID error:", err);
        res.status(500).json({ error: '‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' });
    }
};

// DELETE: Inspection
exports.deleteInspection = async (req, res) => {
    const { id } = req.params;

    try {
        const existingInspection = await db.query('SELECT * FROM inspection WHERE id_inspection = ?', [id]);
        if (existingInspection.length === 0) {
            return res.status(404).json({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö' });
        }

        await db.query('DELETE FROM inspection WHERE id_inspection = ?', [id]);
        res.json({ message: '‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß' });
    } catch (err) {
        console.error("‚ùå Delete inspection error:", err);
        res.status(500).json({ error: '‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' });
    }
};

// GET: Improved Inspections (Updated function name and query)
exports.getImprovedInspections = async (req, res) => {
    try {
        const sql = `
            SELECT 
                * 
            FROM  
                improvement 
            WHERE status = '‡∫õ‡∫±‡∫ö‡∫õ‡∫∏‡∫á‡ªÅ‡∫•‡ªâ‡∫ß'
            ORDER BY id_imporvement DESC
        `;
        const results = await db.query(sql);
        res.json(results);
    } catch (err) {
        console.error("‚ùå Get improved inspections error:", err);
        res.status(500).json({ error: '‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' });
    }
};